accuracy_score,model_path,inference_params,prompt,description
0.3333333333333333,/Users/mckenziequinn/.cache/huggingface/hub/models--TheBloke--Llama-2-7B-GGUF/snapshots/b4e04e128f421c93a5f1e34ac4d7ca9b0af47b80/llama-2-7b.Q4_K_M.gguf,"{'max_tokens': 30, 'temperature': 0.2}","
   You are a product verification assistant. Answer concisely without repeating the prompt. Follow these instructions: 
       - If **ALL query specifications** (size, color, quantity, brand, features) match, respond: Yes
       - If **ANY detail is missing or different**, correct the query and respond EXACTLY as: No Corrected Query: [New Query]
       - Respond ONLY with Yes or No. Corrected Query: [new query].
       
       ### Example 1:
       Query: ""wireless headphones""
       Product: ""Bluetooth Wireless Headphones, Noise Cancelling""
       Response:
       Yes

       ### Example 2:
       Query: ""kodak photo paper 8.5 x 11 glossy""
       Product: ""Kodak Premium Photo Paper, 8.5 x 11, Matte Finish""
       Response:
       No Corrected Query: kodak photo paper 8.5 x 11 matte

       ### Now, analyze this case:
       Query: ""{query}""
       Product: ""{product_title}""
       Response:
   ",LLM straight validation and correction
0.875,/Users/mckenziequinn/.cache/huggingface/hub/models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF/snapshots/3a6fbf4a41a1d52e415a4958cde6856d34b2db93/mistral-7b-instruct-v0.2.Q3_K_M.gguf,"{'attribute_extraction': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'corrected_query': {'max_tokens': 30, 'temperature': 0.2}}","{'attribute_extraction': '\n    Extract the following attributes **only if they are explicitly mentioned** in the product description.  \n\n    **Attributes to Extract:**\n    - ""brand"" (The well-known **manufacturer name** or **brand name**, but if no brand is mentioned, return `null`. Examples: ""Samsung"", ""Canon"", ""Kodak"", etc.)\n    - **Brands typically appear at the beginning** of the product name or may be a recognized word or phrase associated with the product.  \n    - ""product_type"" (**Extract exactly as stated**, including key details like model name, power ratings, product variations or key features. Avoid including non-essential descriptors or brand names in this field).\n    - ""size"" (Physical dimensions or size of product, e.g., ""8.5 x 11"", ""1/4-Inch"").\n    - ""quantity"" (Number of items in the pack or bundle, e.g., ""100"", ""60"").\n    - ""finish"" (Surface type or material finish, e.g., ""Glossy"", ""Matte"").\n\n    ### **Rules:**\n    1. **If an attribute is not mentioned, return `null` explicitly.** Do not assume or generate missing values.\n    2. **Do not generate or infer a brand if it is not explicitly mentioned in the description**. The brand should only be identified if it is clearly present.\n    3. **Extract details exactly as they appear in the text**—do **not** shorten, infer, or rephrase the text. Ensure the **brand** is separated from the **product type**.\n    4. **Preserve important product identifiers** (e.g., `""AA Batteries""`, not just `""Batteries""`).\n    5. **Fix inch notation**: If `""` is used for inches (e.g., `8.5"" x 11""`), **remove `""`** and return `8.5 x 11`.\n    6. **Output must be valid JSON with no extra text, explanations, or markdown.**\n\n    Text: \'{text}\'\n    JSON Output:\n    ', 'corrected_query': '\n    Generate a concise product search query from the following product attributes.\n\n    Corrected Query Dictionary:\n    {corrected_query_dict}\n\n    Output only the search query: \n    '}","LLM to extract query and prodcut attributes as jsons, then compare using heuristics, and use another llm to create corrected query"
0.75,/Users/mckenziequinn/.cache/huggingface/hub/models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF/snapshots/3a6fbf4a41a1d52e415a4958cde6856d34b2db93/mistral-7b-instruct-v0.2.Q3_K_M.gguf,"{'attribute_extraction': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'compare_jsons': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'corrected_query': {'max_tokens': 30, 'temperature': 0.2}}","{'attribute_extraction': '\n    Extract the following attributes **only if they are explicitly mentioned** in the product description.  \n\n    **Attributes to Extract:**\n    - ""brand"" (The well-known **manufacturer name** or **brand name**, but if no brand is mentioned, return `null`. Examples: ""Samsung"", ""Canon"", ""Kodak"", etc.)\n    - **Brands typically appear at the beginning** of the product name or may be a recognized word or phrase associated with the product.  \n    - ""product_type"" (**Extract exactly as stated**, including key details like model name, power ratings, product variations or key features. Avoid including non-essential descriptors or brand names in this field).\n    - ""size"" (Physical dimensions or size of product, e.g., ""8.5 x 11"", ""1/4-Inch"").\n    - ""quantity"" (Number of items in the pack or bundle, e.g., ""100"", ""60"").\n    - ""finish"" (Surface type or material finish, e.g., ""Glossy"", ""Matte"").\n\n    ### **Rules:**\n    1. **If an attribute is not mentioned, return `null` explicitly.** Do not assume or generate missing values.\n    2. **Do not generate or infer a brand if it is not explicitly mentioned in the description**. The brand should only be identified if it is clearly present.\n    3. **Extract details exactly as they appear in the text**—do **not** shorten, infer, or rephrase the text. Ensure the **brand** is separated from the **product type**.\n    4. **Preserve important product identifiers** (e.g., `""AA Batteries""`, not just `""Batteries""`).\n    5. **Fix inch notation**: If `""` is used for inches (e.g., `8.5"" x 11""`), **remove `""`** and return `8.5 x 11`.\n    6. **Output must be valid JSON with no extra text, explanations, or markdown.**\n\n    Text: \'{text}\'\n    JSON Output:\n    ', 'compare_jsons': '\n    You are an expert in structured data comparison. Given two JSON objects, query_json and product_json, \n    compare their key-value pairs to determine if product_json satisfies query_json.\n\n    ### Comparison Rules:\n    - Exact Match: If a key exists in both JSONs, the value in product_json must match or be a valid alternative to the value in query_json.\n    - Subset Match: If the value in query_json is a list, range, or partial string, product_json must include or align with it.\n    - Missing Keys: If query_json contains a key that is missing in product_json, assume the product satisfies the query unless the key is critical for validation.\n    - Additional Information: If product_json contains extra attributes, it still satisfies query_json unless there is a direct contradiction.\n    - Flexible Matching: Account for variations in units (e.g., kg vs. grams), abbreviations, and synonyms where applicable.\n    \n    ### Response Format:\n    Return a JSON response with:\n    - ""match"": ""Yes"" if product_json satisfies query_json, otherwise ""No"".\n    - ""query"": The original query json match ""yes"", otherwise a corrected query json\n    Example Input:\n    query_json = {{\n        ""brand"": ""Nike"",\n        ""color"": ""red"",\n        ""size"": ""L"",\n        ""features"": [""breathable"", ""lightweight""]}}\n    product_json = {{\n        ""brand"": ""Nike"",\n        ""color"": ""red"",\n        ""size"": ""Large"",\n        ""features"": [""breathable"", ""lightweight"", ""moisture-wicking""]\n    }}\n    Example Output:\n    {{\n    ""match"": ""Yes"",\n    ""query"": {{\n        ""brand"": ""Nike"",\n        ""color"": ""red"",\n        ""size"": ""L"",\n        ""features"": [""breathable"", ""lightweight""]\n    }}}}\n    query_json = {query_json}\n    product_json = {product_json}\n    response:\n    ', 'corrected_query': '\n    Generate a concise product search query from the following product attributes.\n\n    Corrected Query Dictionary:\n    {corrected_query_dict}\n\n    Output only the search query: \n    '}","LLM to extract query and prodcut attributes as jsons, then compare JSONs using LLM and use another llm to create corrected query"
0.7083333333333334,/Users/mckenziequinn/.cache/huggingface/hub/models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF/snapshots/3a6fbf4a41a1d52e415a4958cde6856d34b2db93/mistral-7b-instruct-v0.2.Q3_K_M.gguf,"{'product_extraction': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'query_extraction': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'compare_jsons': {'max_tokens': 100, 'temperature': 0.2, 'stop': ['}']}, 'corrected_query': {'max_tokens': 30, 'temperature': 0.2}}","{'product_extraction': ""\n    Extract the key product attributes from the given product title. \n    Return the extracted attributes in a structured JSON format.\n\n    Product title: '{text}'\n    JSON Output:\n    "", 'query_extraction': '\n    Extract the values corresponding to the given attribute keys from the text. \n\n    Follow these strict rules:\n\n    1. **Brand Identification**:\n    - Extract a value for ""Brand"" **only** if the text explicitly contains a known manufacturer or company name.\n    - **Do not assume or infer a brand** if none is mentioned.\n    - If the product name resembles a brand but isn\'t a real one, do not classify it as a brand.\n\n    2. **Product Type vs. Other Attributes**:\n    - Identify product-related attributes (e.g., ""Battery_Type"", ""Material"", ""Size"") correctly.\n    - If an attribute appears in the text, extract it **exactly as stated**.\n    - **Do not confuse the product name with its brand**  (e.g., ""AA Batteries"" → ""AA"" is the battery type, NOT the brand).\n\n    3. **Numerical Attributes**:\n    - Extract numbers only when they indicate quantities (e.g., ""Count"", ""Capacity"", ""Weight"").\n    - Do **not** infer missing numbers; only use explicitly mentioned values.\n\n    4. **Strict No-Hallucination Policy**:\n    - **Only return attributes explicitly stated in the text**.\n    - **Do not infer missing values** (e.g., do not assume default voltages, materials, or sizes).\n    - If an attribute is **not present**, exclude it from the output.\n    \n      Return the output in JSON format.\n\n    Keys: {keys}\n    Text: \'{text}\'\n    JSON Output:\n    ', 'compare_json': '\n        Compare the following JSON objects and determine if the `product_json` satisfies the `query_json`.\n\n        ## **Rules for Satisfaction:**\n        1. All attributes in `query_json` **must exist** in `product_json` and must **match exactly**.\n        - **Text values** should be compared **case-insensitively**.\n        - **Numerical values** should be compared **numerically** (convert strings to numbers if necessary).\n        2. If **any** value in `query_json` differs from `product_json`, **""satisfied"" must be false**.\n        3. If `""satisfied"": false`, **correct `fixed_query`** by replacing the mismatched values in `query_json` with those from `product_json`.\n\n        ### Output Format:\n        Return a JSON object with the following structure:\n        {{\n        ""satisfied"": true or false,\n        ""fixed_query"": {{ ... }}  \n        }}\n        - If `""satisfied"": true`, `fixed_query` should be identical to `query_json`.\n        - If `""satisfied"": false`, fixed_query must contain all original attributes, but mismatched ones replaced with product_json values.\n        query_json = {query_json}\n        product_json = {product_json}\n        response:\n        ', 'corrected_query': '\n    Generate a concise product search query from the following product attributes.\n\n    Corrected Query Dictionary:\n    {corrected_query_dict}\n\n    Output only the search query: \n    '}","LLM to extract query and prodcut attributes as jsons, then compare JSONs using LLM and use another llm to create corrected query"
